name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-matrix:
    name: Build ${{ matrix.platform }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            platform: darwin
            arch: amd64
            binary: claude-notifications-darwin-amd64
          - os: macos-latest
            platform: darwin
            arch: arm64
            binary: claude-notifications-darwin-arm64

          # Linux builds
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            binary: claude-notifications-linux-amd64
          - os: ubuntu-24.04-arm
            platform: linux
            arch: arm64
            binary: claude-notifications-linux-arm64

          # Windows builds
          - os: windows-latest
            platform: windows
            arch: amd64
            binary: claude-notifications-windows-amd64.exe
          - os: windows-latest
            platform: windows
            arch: arm64
            binary: claude-notifications-windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev

      - name: Download dependencies
        run: go mod download

      - name: Build binaries
        env:
          GOOS: ${{ matrix.platform }}
          GOARCH: ${{ matrix.arch }}
        shell: bash
        run: |
          mkdir -p dist
          echo "Building claude-notifications..."
          go build -ldflags="-s -w" -trimpath -o dist/${{ matrix.binary }} ./cmd/claude-notifications
          echo "Building sound-preview..."
          SOUND_PREVIEW_BINARY="${{ matrix.binary }}"
          SOUND_PREVIEW_BINARY="${SOUND_PREVIEW_BINARY//claude-notifications/sound-preview}"
          go build -ldflags="-s -w" -trimpath -o dist/$SOUND_PREVIEW_BINARY ./cmd/sound-preview

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/*
          retention-days: 1

  create-release:
    name: Create GitHub Release
    needs: build-matrix
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-artifacts

      - name: Organize binaries
        run: |
          mkdir -p dist
          find dist-artifacts -type f -exec cp {} dist/ \;
          ls -lh dist/

      - name: Create checksums
        run: |
          cd dist
          sha256sum * > checksums.txt
          cat checksums.txt
          cd ..

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-binaries:
    name: Test ${{ matrix.os }} binary
    needs: create-release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            binary: claude-notifications-linux-amd64
          - os: macos-latest
            binary: claude-notifications-darwin-arm64
          - os: windows-latest
            binary: claude-notifications-windows-amd64.exe

    steps:
      - name: Download release binary
        uses: robinraju/release-downloader@v1.8
        with:
          tag: ${{ github.ref_name }}
          fileName: ${{ matrix.binary }}

      - name: Make binary executable (Unix)
        if: runner.os != 'Windows'
        run: chmod +x ${{ matrix.binary }}

      - name: Test binary
        run: ./${{ matrix.binary }} version
        shell: bash
